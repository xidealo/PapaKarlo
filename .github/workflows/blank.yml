name: Android CI

on:
  pull_request:
  push:
    branches:
      - master

jobs:
  build_job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        run: echo $GOOGLE_SERVICE_JSON > app/google-services.json
      - name: Create local properties
        env:
          RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: echo -e "RELEASE_STORE_FILE=$RELEASE_STORE_FILE
          \nRELEASE_STORE_PASSWORD=$RELEASE_STORE_PASSWORD
          \nRELEASE_KEY_ALIAS=$RELEASE_KEY_ALIAS
          \nRELEASE_KEY_PASSWORD=$RELEASE_KEY_PASSWORD" > local.properties
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Build with Gradle
        run: ./gradlew assemblepapakarloDebug

  check_lint_job:
    runs-on: ubuntu-latest
    needs: build_job
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        run: echo $GOOGLE_SERVICE_JSON > app/google-services.json
      - name: Create local properties
        env:
          RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: echo -e "RELEASE_STORE_FILE=$RELEASE_STORE_FILE
          \nRELEASE_STORE_PASSWORD=$RELEASE_STORE_PASSWORD
          \nRELEASE_KEY_ALIAS=$RELEASE_KEY_ALIAS
          \nRELEASE_KEY_PASSWORD=$RELEASE_KEY_PASSWORD" > local.properties
      - name: check android lint
        run: ./gradlew --continue :app:lint
  check_ktLint_job:
    runs-on: ubuntu-latest
    needs: build_job
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Create local properties
        env:
          RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: echo -e "RELEASE_STORE_FILE=$RELEASE_STORE_FILE
          \nRELEASE_STORE_PASSWORD=$RELEASE_STORE_PASSWORD
          \nRELEASE_KEY_ALIAS=$RELEASE_KEY_ALIAS
          \nRELEASE_KEY_PASSWORD=$RELEASE_KEY_PASSWORD" > local.properties
      - name: check ktLint
        run: ./gradlew --continue ktlintCheck

  unit_tests_job:
    runs-on: ubuntu-latest
    needs: build_job
    steps:
      - uses: actions/checkout@v2
      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        run: echo $GOOGLE_SERVICE_JSON > app/google-services.json
      - name: Create local properties
        env:
          RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: echo -e "RELEASE_STORE_FILE=$RELEASE_STORE_FILE
          \nRELEASE_STORE_PASSWORD=$RELEASE_STORE_PASSWORD
          \nRELEASE_KEY_ALIAS=$RELEASE_KEY_ALIAS
          \nRELEASE_KEY_PASSWORD=$RELEASE_KEY_PASSWORD" > local.properties
      - name: run tests
        run: ./gradlew test

  merge_to_master_job:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2

      - name: set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17

      - name: Decode google-services.json
        env:
          GOOGLE_SERVICE_JSON: ${{ secrets.GOOGLE_SERVICE_JSON }}
        run: echo "${GOOGLE_SERVICE_JSON}" > app/google-services.json

      - name: Decode keystore
        env:
          KEY_STORE: ${{ secrets.KEY_STORE }}
        run: echo "${KEY_STORE}" | base64 --decode > app/keystore

      - name: Decode google-play-api-key.json
        env:
          GOOGLE_PLAY_API_KEY: ${{ secrets.GOOGLE_PLAY_API_KEY }}
        run: echo "${GOOGLE_PLAY_API_KEY}" | base64 --decode > app/google-play-api-key.json

      - name: Create local properties
        env:
          RELEASE_STORE_FILE: ${{ secrets.RELEASE_STORE_FILE }}
          RELEASE_STORE_PASSWORD: ${{ secrets.RELEASE_STORE_PASSWORD }}
          RELEASE_KEY_ALIAS: ${{ secrets.RELEASE_KEY_ALIAS }}
          RELEASE_KEY_PASSWORD: ${{ secrets.RELEASE_KEY_PASSWORD }}
        run: |
          echo -e "RELEASE_STORE_FILE=${RELEASE_STORE_FILE}
          RELEASE_STORE_PASSWORD=${RELEASE_STORE_PASSWORD}
          RELEASE_KEY_ALIAS=${RELEASE_KEY_ALIAS}
          RELEASE_KEY_PASSWORD=${RELEASE_KEY_PASSWORD}" > local.properties

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Verify resources
        run: ls app/src/main/res/values/strings.xml

      - name: Clean project
        run: ./gradlew clean

      - name: start assemble
        run: ./gradlew assembleAll

      - name: start publish
        run: ./gradlew publishAll

  test_ios_deploy:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"

      - name: Bundle install for iOS Gemfile
        timeout-minutes: 5
        run: cd ./iosApp && bundle install

      - name: Decode env.default.json
        env:
          IOS_ENV: ${{ secrets.IOS_ENV }}
        run: echo "${IOS_ENV}" | base64 --decode > iosApp/.env.default

      - name: Decode p8.json
        env:
          IOS_AUTHP8: ${{ secrets.IOS_AUTHP8 }}
        run: echo "${IOS_AUTHP8}" | base64 --decode > iosApp/AuthKey_C274Y8J9DV.p8

      - name: Decode papkarlo.plist
        env:
          IOS_PAPAKARLO_GOOGLE_JSON: ${{ secrets.IOS_PAPAKARLO_GOOGLE_JSON }}
        run: |
          mkdir -p iosApp/papakarloRes
          echo "${IOS_PAPAKARLO_GOOGLE_JSON}" | base64 --decode > iosApp/papakarloRes/GoogleService-Info.plist

      - name: Build and Deploy to TestFlight
        env:
          ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
          ASC_KEY_P8: ${{ secrets.IOS_AUTHP8 }}
        run: |
            cd ./iosApp
            bundle exec fastlane papakarlo